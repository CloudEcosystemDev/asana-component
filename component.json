{
    "title": "Asana",
    "description": "This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).",
    "docsUrl": "",
    "url": "https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml",
    "envVars": {
        "OAUTH_CLIENT_ID": {
            "description": "OAuth Client ID"
        },
        "OAUTH_CLIENT_SECRET": {
            "description": "OAuth Client Secret"
        }
    },
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://app.asana.com/api/1.0 - Main endpoint.",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "oauth2": {
                "label": "We require that applications designed to access the Asana API on behalf of multiple users implement OAuth 2.0.\nAsana supports the Authorization Code Grant flow.",
                "viewClass": "OAuthFieldView"
            },
            "auth_personalAccessToken": {
                "label": "personalAccessToken (undefined)",
                "viewClass": "TextFieldView",
                "note": "A personal access token allows access to the api for the user who created it. This should be kept a secret and be treated like a password."
            }
        },
        "oauth2": {
            "client_id": "{{OAUTH_CLIENT_ID}}",
            "client_secret": "{{OAUTH_CLIENT_SECRET}}",
            "auth_uri": "https://app.asana.com/-/oauth_authorize",
            "token_uri": "https://app.asana.com/-/oauth_token",
            "scopes": [
                "default",
                "openid",
                "email",
                "profile"
            ]
        }
    },
    "triggers": {
        "lookup": {
            "main": "./lib/lookups/lookup.js",
            "title": "Function to run a lookup",
            "description": "Function to call an internal trigger or action"
        },
        "getAuditLogEvents": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get audit log events",
            "description": "Retrieve the audit log events that have been captured in your domain.\n\nThis endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.\n\nThere are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.\n\nThe list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.\n\nWhen no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/audit_log_events",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAuditLogEvents.in.json",
                "out": "./lib/schemas/getAuditLogEvents.out.json"
            }
        },
        "getCustomFieldSettingsForPortfolio": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a portfolio's custom fields",
            "description": "Returns a list of all of the custom fields settings on a portfolio, in compact form.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/custom_field_settings",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCustomFieldSettingsForPortfolio.in.json",
                "out": "./lib/schemas/getCustomFieldSettingsForPortfolio.out.json"
            }
        },
        "getCustomFieldsForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a workspace's custom fields",
            "description": "Returns a list of the compact representation of all of the custom fields in a workspace.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/custom_fields",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCustomFieldsForWorkspace.in.json",
                "out": "./lib/schemas/getCustomFieldsForWorkspace.out.json"
            }
        },
        "getEvents": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get events on a resource",
            "description": "Returns the full record for all events that have occurred since the sync\ntoken was created.\n\nA `GET` request to the endpoint `/[path_to_resource]/events` can be made in\nlieu of including the resource ID in the data for the request.\n\nAsana limits a single sync token to 100 events. If more than 100 events exist\nfor a given resource, `has_more: true` will be returned in the response, indicating\nthat there are more events to pull. \n\n*Note: The resource returned will be the resource that triggered the\nevent. This may be different from the one that the events were requested\nfor. For example, a subscription to a project will contain events for\ntasks contained within the project.*",
            "callParams": {
                "pathName": "/events",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEvents.in.json",
                "out": "./lib/schemas/getEvents.out.json"
            }
        },
        "getCustomFieldSettingsForProject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a project's custom fields",
            "description": "Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://developers.asana.com/docs/#input-output-options) for more information.",
            "callParams": {
                "pathName": "/projects/{project_gid}/custom_field_settings",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCustomFieldSettingsForProject.in.json",
                "out": "./lib/schemas/getCustomFieldSettingsForProject.out.json"
            }
        },
        "supportingWork": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get supporting work from a goal",
            "description": "Returns any portfolios or projects associated with specified goal.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/supportingWork",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/supportingWork.in.json",
                "out": "./lib/schemas/supportingWork.out.json"
            }
        },
        "getPortfolioMemberships": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple portfolio memberships",
            "description": "Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.",
            "callParams": {
                "pathName": "/portfolio_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getPortfolioMemberships.in.json",
                "out": "./lib/schemas/getPortfolioMemberships.out.json"
            }
        },
        "getSubgoalsForGoal": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get subgoals from a goal",
            "description": "Returns a compact representation of all of the subgoals of a goal.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/subgoals",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getSubgoalsForGoal.in.json",
                "out": "./lib/schemas/getSubgoalsForGoal.out.json"
            }
        },
        "getItemsForPortfolio": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get portfolio items",
            "description": "Get a list of the items in compact form in a portfolio.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/items",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getItemsForPortfolio.in.json",
                "out": "./lib/schemas/getItemsForPortfolio.out.json"
            }
        },
        "getAttachmentsForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get attachments for a task",
            "description": "Returns the compact records for all attachments on the task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/attachments",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAttachmentsForTask.in.json",
                "out": "./lib/schemas/getAttachmentsForTask.out.json"
            }
        },
        "getProjectStatusesForProject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get statuses from a project",
            "description": "*Deprecated: new integrations should prefer the `/status_updates` route.*\n\nReturns the compact project status update records for all updates on the project.",
            "callParams": {
                "pathName": "/projects/{project_gid}/project_statuses",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectStatusesForProject.in.json",
                "out": "./lib/schemas/getProjectStatusesForProject.out.json"
            }
        },
        "getProjectTemplatesForTeam": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a team's project templates",
            "description": "Returns the compact project template records for all project templates in the team.",
            "callParams": {
                "pathName": "/teams/{team_gid}/project_templates",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectTemplatesForTeam.in.json",
                "out": "./lib/schemas/getProjectTemplatesForTeam.out.json"
            }
        },
        "getProjects": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple projects",
            "description": "Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned.\n*Note: This endpoint may timeout for large domains. Try filtering by team!*",
            "callParams": {
                "pathName": "/projects",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjects.in.json",
                "out": "./lib/schemas/getProjects.out.json"
            }
        },
        "getProjectMembershipsForProject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get memberships from a project",
            "description": "Returns the compact project membership records for the project.",
            "callParams": {
                "pathName": "/projects/{project_gid}/project_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectMembershipsForProject.in.json",
                "out": "./lib/schemas/getProjectMembershipsForProject.out.json"
            }
        },
        "getProjectsForTeam": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a team's projects",
            "description": "Returns the compact project records for all projects in the team.",
            "callParams": {
                "pathName": "/teams/{team_gid}/projects",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectsForTeam.in.json",
                "out": "./lib/schemas/getProjectsForTeam.out.json"
            }
        },
        "getProjectsForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get projects a task is in",
            "description": "Returns a compact representation of all of the projects the task is in.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/projects",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectsForTask.in.json",
                "out": "./lib/schemas/getProjectsForTask.out.json"
            }
        },
        "getProjectTemplates": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple project templates",
            "description": "Returns the compact project template records for all project templates in the given team or workspace.",
            "callParams": {
                "pathName": "/project_templates",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectTemplates.in.json",
                "out": "./lib/schemas/getProjectTemplates.out.json"
            }
        },
        "getProjectsForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get all projects in a workspace",
            "description": "Returns the compact project records for all projects in the workspace.\n*Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/projects",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectsForWorkspace.in.json",
                "out": "./lib/schemas/getProjectsForWorkspace.out.json"
            }
        },
        "getTaskCountsForProject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get task count of a project",
            "description": "Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/input-output-options) using `opt_fields` to get any information from this endpoint.\n\nThis endpoint has an additional [rate limit](/docs/standard-rate-limits) and each field counts especially high against our [cost limits](/docs/cost-limits).\n\nMilestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.",
            "callParams": {
                "pathName": "/projects/{project_gid}/task_counts",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTaskCountsForProject.in.json",
                "out": "./lib/schemas/getTaskCountsForProject.out.json"
            }
        },
        "getParentGoalsForGoal": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get parent goals from a goal",
            "description": "Returns a compact representation of all of the parent goals of a goal.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/parentGoals",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getParentGoalsForGoal.in.json",
                "out": "./lib/schemas/getParentGoalsForGoal.out.json"
            }
        },
        "getSectionsForProject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get sections in a project",
            "description": "Returns the compact records for all sections in the specified project.",
            "callParams": {
                "pathName": "/projects/{project_gid}/sections",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getSectionsForProject.in.json",
                "out": "./lib/schemas/getSectionsForProject.out.json"
            }
        },
        "getStatusesForObject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get status updates from an object",
            "description": "Returns the compact status update records for all updates on the object.",
            "callParams": {
                "pathName": "/status_updates",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getStatusesForObject.in.json",
                "out": "./lib/schemas/getStatusesForObject.out.json"
            }
        },
        "getStoriesForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get stories from a task",
            "description": "Returns the compact records for all stories on the task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/stories",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getStoriesForTask.in.json",
                "out": "./lib/schemas/getStoriesForTask.out.json"
            }
        },
        "getTags": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple tags",
            "description": "Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.",
            "callParams": {
                "pathName": "/tags",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTags.in.json",
                "out": "./lib/schemas/getTags.out.json"
            }
        },
        "getTagsForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get tags in a workspace",
            "description": "Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/tags",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTagsForWorkspace.in.json",
                "out": "./lib/schemas/getTagsForWorkspace.out.json"
            }
        },
        "getTasks": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple tasks",
            "description": "Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.\n\nFor more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).",
            "callParams": {
                "pathName": "/tasks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTasks.in.json",
                "out": "./lib/schemas/getTasks.out.json"
            }
        },
        "getTagsForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a task's tags",
            "description": "Get a compact representation of all of the tags the task has.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/tags",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTagsForTask.in.json",
                "out": "./lib/schemas/getTagsForTask.out.json"
            }
        },
        "getTasksForSection": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get tasks from a section",
            "description": "*Board view only*: Returns the compact section records for all tasks within the given section.",
            "callParams": {
                "pathName": "/sections/{section_gid}/tasks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTasksForSection.in.json",
                "out": "./lib/schemas/getTasksForSection.out.json"
            }
        },
        "getTasksForProject": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get tasks from a project",
            "description": "Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.",
            "callParams": {
                "pathName": "/projects/{project_gid}/tasks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTasksForProject.in.json",
                "out": "./lib/schemas/getTasksForProject.out.json"
            }
        },
        "getSubtasksForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get subtasks from a task",
            "description": "Returns a compact representation of all of the subtasks of a task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/subtasks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getSubtasksForTask.in.json",
                "out": "./lib/schemas/getSubtasksForTask.out.json"
            }
        },
        "getTasksForTag": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get tasks from a tag",
            "description": "Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.",
            "callParams": {
                "pathName": "/tags/{tag_gid}/tasks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTasksForTag.in.json",
                "out": "./lib/schemas/getTasksForTag.out.json"
            }
        },
        "getDependenciesForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get dependencies from a task",
            "description": "Returns the compact representations of all of the dependencies of a task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/dependencies",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getDependenciesForTask.in.json",
                "out": "./lib/schemas/getDependenciesForTask.out.json"
            }
        },
        "getPortfolioMembershipsForPortfolio": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get memberships from a portfolio",
            "description": "Returns the compact portfolio membership records for the portfolio.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/portfolio_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getPortfolioMembershipsForPortfolio.in.json",
                "out": "./lib/schemas/getPortfolioMembershipsForPortfolio.out.json"
            }
        },
        "getDependentsForTask": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get dependents from a task",
            "description": "Returns the compact representations of all of the dependents of a task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/dependents",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getDependentsForTask.in.json",
                "out": "./lib/schemas/getDependentsForTask.out.json"
            }
        },
        "getTeamMemberships": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get team memberships",
            "description": "Returns compact team membership records.",
            "callParams": {
                "pathName": "/team_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamMemberships.in.json",
                "out": "./lib/schemas/getTeamMemberships.out.json"
            }
        },
        "getTeamMembershipsForTeam": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get memberships from a team",
            "description": "Returns the compact team memberships for the team.",
            "callParams": {
                "pathName": "/teams/{team_gid}/team_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamMembershipsForTeam.in.json",
                "out": "./lib/schemas/getTeamMembershipsForTeam.out.json"
            }
        },
        "getTeamMembershipsForUser": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get memberships from a user",
            "description": "Returns the compact team membership records for the user.",
            "callParams": {
                "pathName": "/users/{user_gid}/team_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamMembershipsForUser.in.json",
                "out": "./lib/schemas/getTeamMembershipsForUser.out.json"
            }
        },
        "getTeamsForOrganization": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get teams in an organization",
            "description": "Returns the compact records for all teams in the organization visible to the authorized user.",
            "callParams": {
                "pathName": "/organizations/{workspace_gid}/teams",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamsForOrganization.in.json",
                "out": "./lib/schemas/getTeamsForOrganization.out.json"
            }
        },
        "getTeamsForWorkspcae": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get teams in an workspace",
            "description": "Returns the compact records for all teams in the workspace visible to the authorized user.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/teams",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamsForWorkspcae.in.json",
                "out": "./lib/schemas/getTeamsForWorkspcae.out.json"
            }
        },
        "getTeamsForUser": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get teams for a user",
            "description": "Returns the compact records for all teams to which the given user is assigned.",
            "callParams": {
                "pathName": "/users/{user_gid}/teams",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamsForUser.in.json",
                "out": "./lib/schemas/getTeamsForUser.out.json"
            }
        },
        "searchTasksForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Search tasks in a workspace",
            "description": "To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need.\n#### Premium access\nLike the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:\n\n- The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace\n\nEven if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error.\n#### Pagination\nSearch results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter.\n#### Eventual consistency\nChanges in Asana (regardless of whether they're made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product.\n#### Rate limits\nYou may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits).\n#### Custom field parameters\n| Parameter name | Custom field type | Accepted type |\n|---|---|---|\n| custom_fields.{gid}.is_set | All | Boolean |\n| custom_fields.{gid}.value | Text | String |\n| custom_fields.{gid}.value | Number | Number |\n| custom_fields.{gid}.value | Enum | Enum option ID |\n| custom_fields.{gid}.starts_with | Text only | String |\n| custom_fields.{gid}.ends_with | Text only | String |\n| custom_fields.{gid}.contains | Text only | String |\n| custom_fields.{gid}.less_than | Number only | Number |\n| custom_fields.{gid}.greater_than | Number only | Number |\n\n\nFor example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.\n\nSearching for multiple exact matches of a custom field is not supported.\n\n*Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/tasks/search",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/searchTasksForWorkspace.in.json",
                "out": "./lib/schemas/searchTasksForWorkspace.out.json"
            }
        },
        "getGoals": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get goals",
            "description": "Returns compact goal records.",
            "callParams": {
                "pathName": "/goals",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getGoals.in.json",
                "out": "./lib/schemas/getGoals.out.json"
            }
        },
        "typeaheadForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get objects via typeahead",
            "description": "Retrieves objects in the workspace based via an auto-completion/typeahead\nsearch algorithm. This feature is meant to provide results quickly, so do\nnot rely on this API to provide extremely accurate search results. The\nresult set is limited to a single page of results with a maximum size, so\nyou won't be able to fetch large numbers of results.\n\nThe typeahead search API provides search for objects from a single\nworkspace. This endpoint should be used to query for objects when\ncreating an auto-completion/typeahead search feature. This API is meant\nto provide results quickly and should not be relied upon for accurate or\nexhaustive search results. The results sets are limited in size and\ncannot be paginated.\n\nQueries return a compact representation of each object which is typically\nthe gid and name fields. Interested in a specific set of fields or all of\nthe fields?! Of course you are. Use field selectors to manipulate what\ndata is included in a response.\n\nResources with type `user` are returned in order of most contacted to\nleast contacted. This is determined by task assignments, adding the user\nto projects, and adding the user as a follower to tasks, messages,\netc.\n\nResources with type `project` are returned in order of recency. This is\ndetermined when the user visits the project, is added to the project, and\ncompletes tasks in the project.\n\nResources with type `task` are returned with priority placed on tasks\nthe user is following, but no guarantee on the order of those tasks.\n\nResources with type `project_template` are returned with priority\nplaced on favorited project templates.\n\nLeaving the `query` string empty or omitted will give you results, still\nfollowing the resource ordering above. This could be used to list users or\nprojects that are relevant for the requesting user's api token.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/typeahead",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/typeaheadForWorkspace.in.json",
                "out": "./lib/schemas/typeaheadForWorkspace.out.json"
            }
        },
        "getUsers": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple users",
            "description": "Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.\nResults are sorted by user ID.",
            "callParams": {
                "pathName": "/users",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getUsers.in.json",
                "out": "./lib/schemas/getUsers.out.json"
            }
        },
        "getUserTaskListForUser": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a user's task list",
            "description": "Returns the full record for a user's task list.",
            "callParams": {
                "pathName": "/users/{user_gid}/user_task_list",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getUserTaskListForUser.in.json",
                "out": "./lib/schemas/getUserTaskListForUser.out.json"
            }
        },
        "getFavoritesForUser": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get a user's favorites",
            "description": "Returns all of a user's favorites in the given workspace, of the given type.\nResults are given in order (The same order as Asana's sidebar).",
            "callParams": {
                "pathName": "/users/{user_gid}/favorites",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getFavoritesForUser.in.json",
                "out": "./lib/schemas/getFavoritesForUser.out.json"
            }
        },
        "getUsersForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get users in a workspace or organization",
            "description": "Returns the compact records for all users in the specified workspace or organization.\nResults are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/users",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getUsersForWorkspace.in.json",
                "out": "./lib/schemas/getUsersForWorkspace.out.json"
            }
        },
        "getUsersForTeam": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get users in a team",
            "description": "Returns the compact records for all users that are members of the team.\nResults are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.",
            "callParams": {
                "pathName": "/teams/{team_gid}/users",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getUsersForTeam.in.json",
                "out": "./lib/schemas/getUsersForTeam.out.json"
            }
        },
        "getWebhooks": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple webhooks",
            "description": "Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.",
            "callParams": {
                "pathName": "/webhooks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWebhooks.in.json",
                "out": "./lib/schemas/getWebhooks.out.json"
            }
        },
        "getWorkspaceMembershipsForUser": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get workspace memberships for a user",
            "description": "Returns the compact workspace membership records for the user.",
            "callParams": {
                "pathName": "/users/{user_gid}/workspace_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWorkspaceMembershipsForUser.in.json",
                "out": "./lib/schemas/getWorkspaceMembershipsForUser.out.json"
            }
        },
        "getTasksForUserTaskList": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get tasks from a user task list",
            "description": "Returns the compact list of tasks in a user's My Tasks list.\n*Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user's private tasks will be filtered out if the API-authenticated user does not have access to them.*\n*Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for \"My Tasks\" in Asana.)*",
            "callParams": {
                "pathName": "/user_task_lists/{user_task_list_gid}/tasks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTasksForUserTaskList.in.json",
                "out": "./lib/schemas/getTasksForUserTaskList.out.json"
            }
        },
        "getWorkspaces": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple workspaces",
            "description": "Returns the compact records for all workspaces visible to the authorized user.",
            "callParams": {
                "pathName": "/workspaces",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWorkspaces.in.json",
                "out": "./lib/schemas/getWorkspaces.out.json"
            }
        },
        "getWorkspaceMembershipsForWorkspace": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get the workspace memberships for a workspace",
            "description": "Returns the compact workspace membership records for the workspace.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/workspace_memberships",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWorkspaceMembershipsForWorkspace.in.json",
                "out": "./lib/schemas/getWorkspaceMembershipsForWorkspace.out.json"
            }
        },
        "getTimePeriods": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get time periods",
            "description": "Returns compact time period records.",
            "callParams": {
                "pathName": "/time_periods",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTimePeriods.in.json",
                "out": "./lib/schemas/getTimePeriods.out.json"
            }
        },
        "getPortfolios": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get multiple portfolios",
            "description": "Returns a list of the portfolios in compact representation that are owned by the current API user.",
            "callParams": {
                "pathName": "/portfolios",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getPortfolios.in.json",
                "out": "./lib/schemas/getPortfolios.out.json"
            }
        }
    },
    "actions": {
        "getAttachment": {
            "main": "./lib/actions/action.js",
            "title": "Get an attachment",
            "description": "Get the full record for a single attachment.",
            "callParams": {
                "pathName": "/attachments/{attachment_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAttachment.in.json",
                "out": "./lib/schemas/getAttachment.out.json"
            }
        },
        "createAttachmentForTask": {
            "main": "./lib/actions/action.js",
            "title": "Upload an attachment",
            "description": "Upload an attachment.\n\nThis method uploads an attachment to a task and returns the compact\nrecord for the created attachment object. This is possible by either:\n\n- Providing the URL of the external resource being attached, or\n- Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach\nfiles from third party services such as Dropbox, Box, Vimeo & Google Drive via the API\n\nThe 100MB size limit on attachments in Asana is enforced on this endpoint.\n\nThis endpoint expects a multipart/form-data encoded request containing\nthe full contents of the file to be uploaded.\n\nRequests made should follow the HTTP/1.1 specification that line\nterminators are of the form `CRLF` or `\\r\\n` outlined\n[here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)\nin order for the server to reliably and properly handle the request.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/attachments",
                "method": "post",
                "requestContentType": "multipart/form-data"
            },
            "metadata": {
                "in": "./lib/schemas/createAttachmentForTask.in.json",
                "out": "./lib/schemas/createAttachmentForTask.out.json"
            }
        },
        "createBatchRequest": {
            "main": "./lib/actions/action.js",
            "title": "Submit parallel requests",
            "description": "Make multiple requests in parallel to Asana's API.",
            "callParams": {
                "pathName": "/batch",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createBatchRequest.in.json",
                "out": "./lib/schemas/createBatchRequest.out.json"
            }
        },
        "insertEnumOptionForCustomField": {
            "main": "./lib/actions/action.js",
            "title": "Reorder a custom field's enum",
            "description": "Moves a particular enum option to be either before or after another specified enum option in the custom field.\nLocked custom fields can only be reordered by the user who locked the field.",
            "callParams": {
                "pathName": "/custom_fields/{custom_field_gid}/enum_options/insert",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/insertEnumOptionForCustomField.in.json",
                "out": "./lib/schemas/insertEnumOptionForCustomField.out.json"
            }
        },
        "getCustomField": {
            "main": "./lib/actions/action.js",
            "title": "Get a custom field",
            "description": "Get the complete definition of a custom field's metadata.\n\nSince custom fields can be defined for one of a number of types, and\nthese types have different data and behaviors, there are fields that are\nrelevant to a particular type. For instance, as noted above, enum_options\nis only relevant for the enum type and defines the set of choices that\nthe enum could represent. The examples below show some of these\ntype-specific custom field definitions.",
            "callParams": {
                "pathName": "/custom_fields/{custom_field_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCustomField.in.json",
                "out": "./lib/schemas/getCustomField.out.json"
            }
        },
        "getGoal": {
            "main": "./lib/actions/action.js",
            "title": "Get a goal",
            "description": "Returns the complete goal record for a single goal.",
            "callParams": {
                "pathName": "/goals/{goal_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getGoal.in.json",
                "out": "./lib/schemas/getGoal.out.json"
            }
        },
        "updateEnumOption": {
            "main": "./lib/actions/action.js",
            "title": "Update an enum option",
            "description": "Updates an existing enum option. Enum custom fields require at least one enabled enum option.\nLocked custom fields can only be updated by the user who locked the field.\nReturns the full record of the updated enum option.",
            "callParams": {
                "pathName": "/enum_options/{enum_option_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateEnumOption.in.json",
                "out": "./lib/schemas/updateEnumOption.out.json"
            }
        },
        "updateGoal": {
            "main": "./lib/actions/action.js",
            "title": "Update a goal",
            "description": "An existing goal can be updated by making a PUT request on the URL for\nthat goal. Only the fields provided in the `data` block will be updated;\nany unspecified fields will remain unchanged.\n\nReturns the complete updated goal record.",
            "callParams": {
                "pathName": "/goals/{goal_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateGoal.in.json",
                "out": "./lib/schemas/updateGoal.out.json"
            }
        },
        "deleteGoal": {
            "main": "./lib/actions/action.js",
            "title": "Delete a goal",
            "description": "A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/goals/{goal_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteGoal.in.json",
                "out": "./lib/schemas/deleteGoal.out.json"
            }
        },
        "updateCustomField": {
            "main": "./lib/actions/action.js",
            "title": "Update a custom field",
            "description": "A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged\nWhen using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.\nA custom field's `type` cannot be updated.\nAn enum custom field's `enum_options` cannot be updated with this endpoint. Instead see \"Work With Enum Options\" for information on how to update `enum_options`.\nLocked custom fields can only be updated by the user who locked the field.\nReturns the complete updated custom field record.",
            "callParams": {
                "pathName": "/custom_fields/{custom_field_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateCustomField.in.json",
                "out": "./lib/schemas/updateCustomField.out.json"
            }
        },
        "createGoalMetric": {
            "main": "./lib/actions/action.js",
            "title": "Create a goal metric",
            "description": "Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/setMetric",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createGoalMetric.in.json",
                "out": "./lib/schemas/createGoalMetric.out.json"
            }
        },
        "removeSupportingWorkForGoal": {
            "main": "./lib/actions/action.js",
            "title": "Remove a project/portfolio as supporting work for a goal.",
            "description": "Removes a project or portfolio as supporting work for a goal.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/removeSupportingWork",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeSupportingWorkForGoal.in.json",
                "out": "./lib/schemas/removeSupportingWorkForGoal.out.json"
            }
        },
        "createGoal": {
            "main": "./lib/actions/action.js",
            "title": "Create a goal",
            "description": "Creates a new goal in a workspace or team.\n\nReturns the full record of the newly created goal.",
            "callParams": {
                "pathName": "/goals",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createGoal.in.json",
                "out": "./lib/schemas/createGoal.out.json"
            }
        },
        "updateGoalMetric": {
            "main": "./lib/actions/action.js",
            "title": "Update a goal metric",
            "description": "Updates a goal's existing metric's `current_number_value` if one exists,\notherwise responds with a 400 status code.\n\nReturns the complete updated goal metric record.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/setMetricCurrentValue",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateGoalMetric.in.json",
                "out": "./lib/schemas/updateGoalMetric.out.json"
            }
        },
        "addSubgoal": {
            "main": "./lib/actions/action.js",
            "title": "Add a subgoal to a parent goal",
            "description": "Adds a subgoal to a parent goal. *A goal can have at most 100 subgoals, and a subgoal can have at most 4 parent goals.\n\nReturns an empty data block.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/addSubgoal",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addSubgoal.in.json",
                "out": "./lib/schemas/addSubgoal.out.json"
            }
        },
        "removeFollowers": {
            "main": "./lib/actions/action.js",
            "title": "Remove a collaborator from a goal",
            "description": "Removes followers from a goal. Returns the goal the followers were removed from.\nEach goal can be associated with zero or more followers in the system.\nRequests to add/remove followers, if successful, will return the complete updated goal record, described above.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/removeFollowers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeFollowers.in.json",
                "out": "./lib/schemas/removeFollowers.out.json"
            }
        },
        "removeSubgoal": {
            "main": "./lib/actions/action.js",
            "title": "Remove a subgoal from a goal",
            "description": "Removes a goal as a subgoal of a specified parent goal.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/removeSubgoal",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeSubgoal.in.json",
                "out": "./lib/schemas/removeSubgoal.out.json"
            }
        },
        "addSupportingWorkForGoal": {
            "main": "./lib/actions/action.js",
            "title": "Add a project/portfolio as supporting work for a goal.",
            "description": "Adds a project or portfolio as supporting work for a goal. *A goal can have at most 10 supporting projects/portfolios, and a project/portfolio can support at most 10 goals*.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/addSupportingWork",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addSupportingWorkForGoal.in.json",
                "out": "./lib/schemas/addSupportingWorkForGoal.out.json"
            }
        },
        "createCustomField": {
            "main": "./lib/actions/action.js",
            "title": "Create a custom field",
            "description": "Creates a new custom field in a workspace. Every custom field is required\nto be created in a specific workspace, and this workspace cannot be\nchanged once set.\n\nA custom field's name must be unique within a workspace and not conflict\nwith names of existing task properties such as `Due Date` or `Assignee`.\nA custom field's type must be one of `text`, `enum`, `multi_enum` or `number`.\n\nReturns the full record of the newly created custom field.",
            "callParams": {
                "pathName": "/custom_fields",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createCustomField.in.json",
                "out": "./lib/schemas/createCustomField.out.json"
            }
        },
        "getJob": {
            "main": "./lib/actions/action.js",
            "title": "Get a job by id",
            "description": "Returns the full record for a job.",
            "callParams": {
                "pathName": "/jobs/{job_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getJob.in.json",
                "out": "./lib/schemas/getJob.out.json"
            }
        },
        "createOrganizationExport": {
            "main": "./lib/actions/action.js",
            "title": "Create an organization export request",
            "description": "This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.",
            "callParams": {
                "pathName": "/organization_exports",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createOrganizationExport.in.json",
                "out": "./lib/schemas/createOrganizationExport.out.json"
            }
        },
        "getPortfolioMembership": {
            "main": "./lib/actions/action.js",
            "title": "Get a portfolio membership",
            "description": "Returns the complete portfolio record for a single portfolio membership.",
            "callParams": {
                "pathName": "/portfolio_memberships/{portfolio_membership_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getPortfolioMembership.in.json",
                "out": "./lib/schemas/getPortfolioMembership.out.json"
            }
        },
        "createPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Create a portfolio",
            "description": "Creates a new portfolio in the given workspace with the supplied name.\n\nNote that portfolios created in the Asana UI may have some state\n(like the \"Priority\" custom field) which is automatically added\nto the portfolio when it is created. Portfolios created via our\nAPI will *not* be created with the same initial state to allow\nintegrations to create their own starting state on a portfolio.",
            "callParams": {
                "pathName": "/portfolios",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createPortfolio.in.json",
                "out": "./lib/schemas/createPortfolio.out.json"
            }
        },
        "getOrganizationExport": {
            "main": "./lib/actions/action.js",
            "title": "Get details on an org export request",
            "description": "Returns details of a previously-requested Organization export.",
            "callParams": {
                "pathName": "/organization_exports/{organization_export_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getOrganizationExport.in.json",
                "out": "./lib/schemas/getOrganizationExport.out.json"
            }
        },
        "getPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Get a portfolio",
            "description": "Returns the complete portfolio record for a single portfolio.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getPortfolio.in.json",
                "out": "./lib/schemas/getPortfolio.out.json"
            }
        },
        "deletePortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Delete a portfolio",
            "description": "An existing portfolio can be deleted by making a DELETE request on\nthe URL for that portfolio.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deletePortfolio.in.json",
                "out": "./lib/schemas/deletePortfolio.out.json"
            }
        },
        "removeItemForPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Remove a portfolio item",
            "description": "Remove an item from a portfolio.\nReturns an empty data block.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/removeItem",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeItemForPortfolio.in.json",
                "out": "./lib/schemas/removeItemForPortfolio.out.json"
            }
        },
        "deleteAttachment": {
            "main": "./lib/actions/action.js",
            "title": "Delete an attachment",
            "description": "Deletes a specific, existing attachment.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/attachments/{attachment_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteAttachment.in.json",
                "out": "./lib/schemas/deleteAttachment.out.json"
            }
        },
        "addMembersForPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Add users to a portfolio",
            "description": "Adds the specified list of users as members of the portfolio.\nReturns the updated portfolio record.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/addMembers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addMembersForPortfolio.in.json",
                "out": "./lib/schemas/addMembersForPortfolio.out.json"
            }
        },
        "updatePortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Update a portfolio",
            "description": "An existing portfolio can be updated by making a PUT request on the URL for\nthat portfolio. Only the fields provided in the `data` block will be updated;\nany unspecified fields will remain unchanged.\n\nReturns the complete updated portfolio record.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updatePortfolio.in.json",
                "out": "./lib/schemas/updatePortfolio.out.json"
            }
        },
        "removeCustomFieldSettingForPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Remove a custom field from a portfolio",
            "description": "Removes a custom field setting from a portfolio.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/removeCustomFieldSetting",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeCustomFieldSettingForPortfolio.in.json",
                "out": "./lib/schemas/removeCustomFieldSettingForPortfolio.out.json"
            }
        },
        "addItemForPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Add a portfolio item",
            "description": "Add an item to a portfolio.\nReturns an empty data block.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/addItem",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addItemForPortfolio.in.json",
                "out": "./lib/schemas/addItemForPortfolio.out.json"
            }
        },
        "getProjectBrief": {
            "main": "./lib/actions/action.js",
            "title": "Get a project brief",
            "description": "Get the full record for a project brief.",
            "callParams": {
                "pathName": "/project_briefs/{project_brief_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectBrief.in.json",
                "out": "./lib/schemas/getProjectBrief.out.json"
            }
        },
        "addCustomFieldSettingForPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Add a custom field to a portfolio",
            "description": "Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/addCustomFieldSetting",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addCustomFieldSettingForPortfolio.in.json",
                "out": "./lib/schemas/addCustomFieldSettingForPortfolio.out.json"
            }
        },
        "deleteCustomField": {
            "main": "./lib/actions/action.js",
            "title": "Delete a custom field",
            "description": "A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.\nLocked custom fields can only be deleted by the user who locked the field.\nReturns an empty data record.",
            "callParams": {
                "pathName": "/custom_fields/{custom_field_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteCustomField.in.json",
                "out": "./lib/schemas/deleteCustomField.out.json"
            }
        },
        "getProjectMembership": {
            "main": "./lib/actions/action.js",
            "title": "Get a project membership",
            "description": "Returns the complete project record for a single project membership.",
            "callParams": {
                "pathName": "/project_memberships/{project_membership_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectMembership.in.json",
                "out": "./lib/schemas/getProjectMembership.out.json"
            }
        },
        "updateProjectBrief": {
            "main": "./lib/actions/action.js",
            "title": "Update a project brief",
            "description": "An existing project brief can be updated by making a PUT request on the URL for\nthat project brief. Only the fields provided in the `data` block will be updated;\nany unspecified fields will remain unchanged.\n\nReturns the complete updated project brief record.",
            "callParams": {
                "pathName": "/project_briefs/{project_brief_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateProjectBrief.in.json",
                "out": "./lib/schemas/updateProjectBrief.out.json"
            }
        },
        "getProjectStatus": {
            "main": "./lib/actions/action.js",
            "title": "Get a project status",
            "description": "*Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*\n\nReturns the complete record for a single status update.",
            "callParams": {
                "pathName": "/project_statuses/{project_status_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectStatus.in.json",
                "out": "./lib/schemas/getProjectStatus.out.json"
            }
        },
        "createProjectBrief": {
            "main": "./lib/actions/action.js",
            "title": "Create a project brief",
            "description": "Creates a new project brief.\n\nReturns the full record of the newly created project brief.",
            "callParams": {
                "pathName": "/projects/{project_gid}/project_briefs",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createProjectBrief.in.json",
                "out": "./lib/schemas/createProjectBrief.out.json"
            }
        },
        "instantiateProject": {
            "main": "./lib/actions/action.js",
            "title": "Instantiate a project from a project template",
            "description": "Creates and returns a job that will asynchronously handle the project instantiation.",
            "callParams": {
                "pathName": "/project_templates/{project_template_gid}/instantiateProject",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/instantiateProject.in.json",
                "out": "./lib/schemas/instantiateProject.out.json"
            }
        },
        "getProjectTemplate": {
            "main": "./lib/actions/action.js",
            "title": "Get a project template",
            "description": "Returns the complete project template record for a single project template.",
            "callParams": {
                "pathName": "/project_templates/{project_template_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProjectTemplate.in.json",
                "out": "./lib/schemas/getProjectTemplate.out.json"
            }
        },
        "deleteProjectStatus": {
            "main": "./lib/actions/action.js",
            "title": "Delete a project status",
            "description": "*Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*\n\nDeletes a specific, existing project status update.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/project_statuses/{project_status_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteProjectStatus.in.json",
                "out": "./lib/schemas/deleteProjectStatus.out.json"
            }
        },
        "addFollowers": {
            "main": "./lib/actions/action.js",
            "title": "Add a collaborator to a goal",
            "description": "Adds followers to a goal. Returns the goal the followers were added to.\nEach goal can be associated with zero or more followers in the system.\nRequests to add/remove followers, if successful, will return the complete updated goal record, described above.",
            "callParams": {
                "pathName": "/goals/{goal_gid}/addFollowers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addFollowers.in.json",
                "out": "./lib/schemas/addFollowers.out.json"
            }
        },
        "deleteProject": {
            "main": "./lib/actions/action.js",
            "title": "Delete a project",
            "description": "A specific, existing project can be deleted by making a DELETE request on\nthe URL for that project.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/projects/{project_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteProject.in.json",
                "out": "./lib/schemas/deleteProject.out.json"
            }
        },
        "duplicateProject": {
            "main": "./lib/actions/action.js",
            "title": "Duplicate a project",
            "description": "Creates and returns a job that will asynchronously handle the duplication.",
            "callParams": {
                "pathName": "/projects/{project_gid}/duplicate",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/duplicateProject.in.json",
                "out": "./lib/schemas/duplicateProject.out.json"
            }
        },
        "getProject": {
            "main": "./lib/actions/action.js",
            "title": "Get a project",
            "description": "Returns the complete project record for a single project.",
            "callParams": {
                "pathName": "/projects/{project_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getProject.in.json",
                "out": "./lib/schemas/getProject.out.json"
            }
        },
        "createProject": {
            "main": "./lib/actions/action.js",
            "title": "Create a project",
            "description": "Create a new project in a workspace or team.\n\nEvery project is required to be created in a specific workspace or\norganization, and this cannot be changed once set. Note that you can use\nthe `workspace` parameter regardless of whether or not it is an\norganization.\n\nIf the workspace for your project is an organization, you must also\nsupply a `team` to share the project with.\n\nReturns the full record of the newly created project.",
            "callParams": {
                "pathName": "/projects",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createProject.in.json",
                "out": "./lib/schemas/createProject.out.json"
            }
        },
        "createProjectStatusForProject": {
            "main": "./lib/actions/action.js",
            "title": "Create a project status",
            "description": "*Deprecated: new integrations should prefer the `/status_updates` route.*\n\nCreates a new status update on the project.\n\nReturns the full record of the newly created project status update.",
            "callParams": {
                "pathName": "/projects/{project_gid}/project_statuses",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createProjectStatusForProject.in.json",
                "out": "./lib/schemas/createProjectStatusForProject.out.json"
            }
        },
        "removeMembersForProject": {
            "main": "./lib/actions/action.js",
            "title": "Remove users from a project",
            "description": "Removes the specified list of users from members of the project.\nReturns the updated project record.",
            "callParams": {
                "pathName": "/projects/{project_gid}/removeMembers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeMembersForProject.in.json",
                "out": "./lib/schemas/removeMembersForProject.out.json"
            }
        },
        "addFollowersForProject": {
            "main": "./lib/actions/action.js",
            "title": "Add followers to a project",
            "description": "Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation.\nReturns the updated project record.",
            "callParams": {
                "pathName": "/projects/{project_gid}/addFollowers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addFollowersForProject.in.json",
                "out": "./lib/schemas/addFollowersForProject.out.json"
            }
        },
        "createEnumOptionForCustomField": {
            "main": "./lib/actions/action.js",
            "title": "Create an enum option",
            "description": "Creates an enum option and adds it to this custom field's list of enum options. A custom field can have at most 100 enum options (including disabled options). By default new enum options are inserted at the end of a custom field's list.\nLocked custom fields can only have enum options added by the user who locked the field.\nReturns the full record of the newly created enum option.",
            "callParams": {
                "pathName": "/custom_fields/{custom_field_gid}/enum_options",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createEnumOptionForCustomField.in.json",
                "out": "./lib/schemas/createEnumOptionForCustomField.out.json"
            }
        },
        "removeCustomFieldSettingForProject": {
            "main": "./lib/actions/action.js",
            "title": "Remove a custom field from a project",
            "description": "Removes a custom field setting from a project.",
            "callParams": {
                "pathName": "/projects/{project_gid}/removeCustomFieldSetting",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeCustomFieldSettingForProject.in.json",
                "out": "./lib/schemas/removeCustomFieldSettingForProject.out.json"
            }
        },
        "getSection": {
            "main": "./lib/actions/action.js",
            "title": "Get a section",
            "description": "Returns the complete record for a single section.",
            "callParams": {
                "pathName": "/sections/{section_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getSection.in.json",
                "out": "./lib/schemas/getSection.out.json"
            }
        },
        "addCustomFieldSettingForProject": {
            "main": "./lib/actions/action.js",
            "title": "Add a custom field to a project",
            "description": "Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.",
            "callParams": {
                "pathName": "/projects/{project_gid}/addCustomFieldSetting",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addCustomFieldSettingForProject.in.json",
                "out": "./lib/schemas/addCustomFieldSettingForProject.out.json"
            }
        },
        "addTaskForSection": {
            "main": "./lib/actions/action.js",
            "title": "Add task to section",
            "description": "Add a task to a specific, existing section. This will remove the task from other sections of the project.\n\nThe task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.\n\nThis does not work for separators (tasks with the resource_subtype of section).",
            "callParams": {
                "pathName": "/sections/{section_gid}/addTask",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addTaskForSection.in.json",
                "out": "./lib/schemas/addTaskForSection.out.json"
            }
        },
        "createSectionForProject": {
            "main": "./lib/actions/action.js",
            "title": "Create a section in a project",
            "description": "Creates a new section in a project.\nReturns the full record of the newly created section.",
            "callParams": {
                "pathName": "/projects/{project_gid}/sections",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createSectionForProject.in.json",
                "out": "./lib/schemas/createSectionForProject.out.json"
            }
        },
        "removeFollowersForProject": {
            "main": "./lib/actions/action.js",
            "title": "Remove followers from a project",
            "description": "Removes the specified list of users from following the project, this will not affect project membership status.\nReturns the updated project record.",
            "callParams": {
                "pathName": "/projects/{project_gid}/removeFollowers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeFollowersForProject.in.json",
                "out": "./lib/schemas/removeFollowersForProject.out.json"
            }
        },
        "createStatusForObject": {
            "main": "./lib/actions/action.js",
            "title": "Create a status update",
            "description": "Creates a new status update on an object.\nReturns the full record of the newly created status update.",
            "callParams": {
                "pathName": "/status_updates",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createStatusForObject.in.json",
                "out": "./lib/schemas/createStatusForObject.out.json"
            }
        },
        "getStatus": {
            "main": "./lib/actions/action.js",
            "title": "Get a status update",
            "description": "Returns the complete record for a single status update.",
            "callParams": {
                "pathName": "/status_updates/{status_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getStatus.in.json",
                "out": "./lib/schemas/getStatus.out.json"
            }
        },
        "getStory": {
            "main": "./lib/actions/action.js",
            "title": "Get a story",
            "description": "Returns the full record for a single story.",
            "callParams": {
                "pathName": "/stories/{story_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getStory.in.json",
                "out": "./lib/schemas/getStory.out.json"
            }
        },
        "updateStory": {
            "main": "./lib/actions/action.js",
            "title": "Update a story",
            "description": "Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.",
            "callParams": {
                "pathName": "/stories/{story_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateStory.in.json",
                "out": "./lib/schemas/updateStory.out.json"
            }
        },
        "projectSaveAsTemplate": {
            "main": "./lib/actions/action.js",
            "title": "Create a project template from a project",
            "description": "Creates and returns a job that will asynchronously handle the project template creation. Note that\nwhile the resulting project template can be accessed with the API, it won't be visible in the Asana\nUI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).",
            "callParams": {
                "pathName": "/projects/{project_gid}/saveAsTemplate",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/projectSaveAsTemplate.in.json",
                "out": "./lib/schemas/projectSaveAsTemplate.out.json"
            }
        },
        "deleteProjectBrief": {
            "main": "./lib/actions/action.js",
            "title": "Delete a project brief",
            "description": "Deletes a specific, existing project brief.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/project_briefs/{project_brief_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteProjectBrief.in.json",
                "out": "./lib/schemas/deleteProjectBrief.out.json"
            }
        },
        "insertSectionForProject": {
            "main": "./lib/actions/action.js",
            "title": "Move or Insert sections",
            "description": "Move sections relative to each other. One of\n`before_section` or `after_section` is required.\n\nSections cannot be moved between projects.\n\nReturns an empty data block.",
            "callParams": {
                "pathName": "/projects/{project_gid}/sections/insert",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/insertSectionForProject.in.json",
                "out": "./lib/schemas/insertSectionForProject.out.json"
            }
        },
        "deleteStory": {
            "main": "./lib/actions/action.js",
            "title": "Delete a story",
            "description": "Deletes a story. A user can only delete stories they have created.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/stories/{story_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteStory.in.json",
                "out": "./lib/schemas/deleteStory.out.json"
            }
        },
        "deleteTag": {
            "main": "./lib/actions/action.js",
            "title": "Delete a tag",
            "description": "A specific, existing tag can be deleted by making a DELETE request on\nthe URL for that tag.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/tags/{tag_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteTag.in.json",
                "out": "./lib/schemas/deleteTag.out.json"
            }
        },
        "getTag": {
            "main": "./lib/actions/action.js",
            "title": "Get a tag",
            "description": "Returns the complete tag record for a single tag.",
            "callParams": {
                "pathName": "/tags/{tag_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTag.in.json",
                "out": "./lib/schemas/getTag.out.json"
            }
        },
        "createTagForWorkspace": {
            "main": "./lib/actions/action.js",
            "title": "Create a tag in a workspace",
            "description": "Creates a new tag in a workspace or organization.\n\nEvery tag is required to be created in a specific workspace or\norganization, and this cannot be changed once set. Note that you can use\nthe workspace parameter regardless of whether or not it is an\norganization.\n\nReturns the full record of the newly created tag.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/tags",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createTagForWorkspace.in.json",
                "out": "./lib/schemas/createTagForWorkspace.out.json"
            }
        },
        "getTask": {
            "main": "./lib/actions/action.js",
            "title": "Get a task",
            "description": "Returns the complete task record for a single task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTask.in.json",
                "out": "./lib/schemas/getTask.out.json"
            }
        },
        "duplicateTask": {
            "main": "./lib/actions/action.js",
            "title": "Duplicate a task",
            "description": "Creates and returns a job that will asynchronously handle the duplication.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/duplicate",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/duplicateTask.in.json",
                "out": "./lib/schemas/duplicateTask.out.json"
            }
        },
        "createTask": {
            "main": "./lib/actions/action.js",
            "title": "Create a task",
            "description": "Creating a new task is as easy as POSTing to the `/tasks` endpoint with a\ndata block containing the fields you'd like to set on the task. Any\nunspecified fields will take on default values.\n\nEvery task is required to be created in a specific workspace, and this\nworkspace cannot be changed once set. The workspace need not be set\nexplicitly if you specify `projects` or a `parent` task instead.",
            "callParams": {
                "pathName": "/tasks",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createTask.in.json",
                "out": "./lib/schemas/createTask.out.json"
            }
        },
        "updateTask": {
            "main": "./lib/actions/action.js",
            "title": "Update a task",
            "description": "A specific, existing task can be updated by making a PUT request on the\nURL for that task. Only the fields provided in the `data` block will be\nupdated; any unspecified fields will remain unchanged.\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated task record.",
            "callParams": {
                "pathName": "/tasks/{task_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateTask.in.json",
                "out": "./lib/schemas/updateTask.out.json"
            }
        },
        "updateTag": {
            "main": "./lib/actions/action.js",
            "title": "Update a tag",
            "description": "Updates the properties of a tag. Only the fields provided in the `data`\nblock will be updated; any unspecified fields will remain unchanged.\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the tag.\n\nReturns the complete updated tag record.",
            "callParams": {
                "pathName": "/tags/{tag_gid}",
                "method": "put"
            },
            "metadata": {
                "in": "./lib/schemas/updateTag.in.json",
                "out": "./lib/schemas/updateTag.out.json"
            }
        },
        "removeMembersForPortfolio": {
            "main": "./lib/actions/action.js",
            "title": "Remove users from a portfolio",
            "description": "Removes the specified list of users from members of the portfolio.\nReturns the updated portfolio record.",
            "callParams": {
                "pathName": "/portfolios/{portfolio_gid}/removeMembers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeMembersForPortfolio.in.json",
                "out": "./lib/schemas/removeMembersForPortfolio.out.json"
            }
        },
        "setParentForTask": {
            "main": "./lib/actions/action.js",
            "title": "Set the parent of a task",
            "description": "parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/setParent",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/setParentForTask.in.json",
                "out": "./lib/schemas/setParentForTask.out.json"
            }
        },
        "addDependenciesForTask": {
            "main": "./lib/actions/action.js",
            "title": "Set dependencies for a task",
            "description": "Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 15 dependencies*.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/addDependencies",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addDependenciesForTask.in.json",
                "out": "./lib/schemas/addDependenciesForTask.out.json"
            }
        },
        "createSubtaskForTask": {
            "main": "./lib/actions/action.js",
            "title": "Create a subtask",
            "description": "Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/subtasks",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createSubtaskForTask.in.json",
                "out": "./lib/schemas/createSubtaskForTask.out.json"
            }
        },
        "removeDependenciesForTask": {
            "main": "./lib/actions/action.js",
            "title": "Unlink dependencies from a task",
            "description": "Unlinks a set of dependencies from this task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/removeDependencies",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeDependenciesForTask.in.json",
                "out": "./lib/schemas/removeDependenciesForTask.out.json"
            }
        },
        "addProjectForTask": {
            "main": "./lib/actions/action.js",
            "title": "Add a project to a task",
            "description": "Adds the task to the specified project, in the optional location\nspecified. If no location arguments are given, the task will be added to\nthe end of the project.\n\n`addProject` can also be used to reorder a task within a project or\nsection that already contains it.\n\nAt most one of `insert_before`, `insert_after`, or `section` should be\nspecified. Inserting into a section in an non-order-dependent way can be\ndone by specifying section, otherwise, to insert within a section in a\nparticular place, specify `insert_before` or `insert_after` and a task\nwithin the section to anchor the position of this task.\n\nReturns an empty data block.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/addProject",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addProjectForTask.in.json",
                "out": "./lib/schemas/addProjectForTask.out.json"
            }
        },
        "deleteSection": {
            "main": "./lib/actions/action.js",
            "title": "Delete a section",
            "description": "A specific, existing section can be deleted by making a DELETE request on\nthe URL for that section.\n\nNote that sections must be empty to be deleted.\n\nThe last remaining section cannot be deleted.\n\nReturns an empty data block.",
            "callParams": {
                "pathName": "/sections/{section_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteSection.in.json",
                "out": "./lib/schemas/deleteSection.out.json"
            }
        },
        "createTag": {
            "main": "./lib/actions/action.js",
            "title": "Create a tag",
            "description": "Creates a new tag in a workspace or organization.\n\nEvery tag is required to be created in a specific workspace or\norganization, and this cannot be changed once set. Note that you can use\nthe workspace parameter regardless of whether or not it is an\norganization.\n\nReturns the full record of the newly created tag.",
            "callParams": {
                "pathName": "/tags",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createTag.in.json",
                "out": "./lib/schemas/createTag.out.json"
            }
        },
        "createStoryForTask": {
            "main": "./lib/actions/action.js",
            "title": "Create a story on a task",
            "description": "Adds a story to a task. This endpoint currently only allows for comment\nstories to be created. The comment will be authored by the currently\nauthenticated user, and timestamped when the server receives the request.\n\nReturns the full record for the new story added to the task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/stories",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createStoryForTask.in.json",
                "out": "./lib/schemas/createStoryForTask.out.json"
            }
        },
        "addFollowersForTask": {
            "main": "./lib/actions/action.js",
            "title": "Add followers to a task",
            "description": "Adds followers to a task. Returns an empty data block.\nEach task can be associated with zero or more followers in the system.\nRequests to add/remove followers, if successful, will return the complete updated task record, described above.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/addFollowers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addFollowersForTask.in.json",
                "out": "./lib/schemas/addFollowersForTask.out.json"
            }
        },
        "removeTagForTask": {
            "main": "./lib/actions/action.js",
            "title": "Remove a tag from a task",
            "description": "Removes a tag from a task. Returns an empty data block.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/removeTag",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeTagForTask.in.json",
                "out": "./lib/schemas/removeTagForTask.out.json"
            }
        },
        "deleteTask": {
            "main": "./lib/actions/action.js",
            "title": "Delete a task",
            "description": "A specific, existing task can be deleted by making a DELETE request on\nthe URL for that task. Deleted tasks go into the \"trash\" of the user\nmaking the delete request. Tasks can be recovered from the trash within a\nperiod of 30 days; afterward they are completely removed from the system.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/tasks/{task_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteTask.in.json",
                "out": "./lib/schemas/deleteTask.out.json"
            }
        },
        "removeProjectForTask": {
            "main": "./lib/actions/action.js",
            "title": "Remove a project from a task",
            "description": "Removes the task from the specified project. The task will still exist in\nthe system, but it will not be in the project anymore.\n\nReturns an empty data block.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/removeProject",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeProjectForTask.in.json",
                "out": "./lib/schemas/removeProjectForTask.out.json"
            }
        },
        "removeDependentsForTask": {
            "main": "./lib/actions/action.js",
            "title": "Unlink dependents from a task",
            "description": "Unlinks a set of dependents from this task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/removeDependents",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeDependentsForTask.in.json",
                "out": "./lib/schemas/removeDependentsForTask.out.json"
            }
        },
        "getTeamMembership": {
            "main": "./lib/actions/action.js",
            "title": "Get a team membership",
            "description": "Returns the complete team membership record for a single team membership.",
            "callParams": {
                "pathName": "/team_memberships/{team_membership_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeamMembership.in.json",
                "out": "./lib/schemas/getTeamMembership.out.json"
            }
        },
        "createTeam": {
            "main": "./lib/actions/action.js",
            "title": "Create a team",
            "description": "Creates a team within the current workspace.",
            "callParams": {
                "pathName": "/teams",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createTeam.in.json",
                "out": "./lib/schemas/createTeam.out.json"
            }
        },
        "addMembersForProject": {
            "main": "./lib/actions/action.js",
            "title": "Add users to a project",
            "description": "Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user's default notification settings (i.e., in the \"Notifcations\" tab of \"My Profile Settings\") will override this endpoint's default behavior of setting \"Tasks added\" notifications to `false`.\nReturns the updated project record.",
            "callParams": {
                "pathName": "/projects/{project_gid}/addMembers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addMembersForProject.in.json",
                "out": "./lib/schemas/addMembersForProject.out.json"
            }
        },
        "addUserForTeam": {
            "main": "./lib/actions/action.js",
            "title": "Add a user to a team",
            "description": "The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.\n\nReturns the complete team membership record for the newly added user.",
            "callParams": {
                "pathName": "/teams/{team_gid}/addUser",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addUserForTeam.in.json",
                "out": "./lib/schemas/addUserForTeam.out.json"
            }
        },
        "getTeam": {
            "main": "./lib/actions/action.js",
            "title": "Get a team",
            "description": "Returns the full record for a single team.",
            "callParams": {
                "pathName": "/teams/{team_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTeam.in.json",
                "out": "./lib/schemas/getTeam.out.json"
            }
        },
        "getTimePeriod": {
            "main": "./lib/actions/action.js",
            "title": "Get a time period",
            "description": "Returns the full record for a single time period.",
            "callParams": {
                "pathName": "/time_periods/{time_period_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTimePeriod.in.json",
                "out": "./lib/schemas/getTimePeriod.out.json"
            }
        },
        "getUserTaskList": {
            "main": "./lib/actions/action.js",
            "title": "Get a user task list",
            "description": "Returns the full record for a user task list.",
            "callParams": {
                "pathName": "/user_task_lists/{user_task_list_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getUserTaskList.in.json",
                "out": "./lib/schemas/getUserTaskList.out.json"
            }
        },
        "updateWebhook": {
            "main": "./lib/actions/action.js",
            "title": "Update a webhook",
            "description": "An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. ",
            "callParams": {
                "pathName": "/webhooks/{webhook_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateWebhook.in.json",
                "out": "./lib/schemas/updateWebhook.out.json"
            }
        },
        "addTagForTask": {
            "main": "./lib/actions/action.js",
            "title": "Add a tag to a task",
            "description": "Adds a tag to a task. Returns an empty data block.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/addTag",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addTagForTask.in.json",
                "out": "./lib/schemas/addTagForTask.out.json"
            }
        },
        "createWebhook": {
            "main": "./lib/actions/action.js",
            "title": "Establish a webhook",
            "description": "Establishing a webhook is a two-part process. First, a simple HTTP POST\nrequest initiates the creation similar to creating any other resource.\n\nNext, in the middle of this request comes the confirmation handshake.\nWhen a webhook is created, we will send a test POST to the target with an\n`X-Hook-Secret` header. The target must respond with a `200 OK` or `204\nNo Content` and a matching `X-Hook-Secret` header to confirm that this\nwebhook subscription is indeed expected. We strongly recommend storing\nthis secret to be used to verify future webhook event signatures.\n\nThe POST request to create the webhook will then return with the status\nof the request. If you do not acknowledge the webhook's confirmation\nhandshake it will fail to setup, and you will receive an error in\nresponse to your attempt to create it. This means you need to be able to\nreceive and complete the webhook *while* the POST request is in-flight\n(in other words, have a server that can handle requests asynchronously).\n\nInvalid hostnames like localhost will recieve a 403 Forbidden status code.\n\n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\" \\\n-X POST https://app.asana.com/api/1.0/webhooks \\\n-d \"resource=8675309\" \\\n-d \"target=https://example.com/receive-webhook/7654\"\n```\n\n```\n# Handshake sent to https://example.com/\nPOST /receive-webhook/7654\nX-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\n```\n\n```\n# Handshake response sent by example.com\nHTTP/1.1 200\nX-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\n```\n\n```\n# Response\nHTTP/1.1 201\n{\n  \"data\": {\n    \"gid\": \"43214\",\n    \"resource\": {\n      \"gid\": \"8675309\",\n      \"name\": \"Bugs\"\n    },\n    \"target\": \"https://example.com/receive-webhook/7654\",\n    \"active\": false,\n    \"last_success_at\": null,\n    \"last_failure_at\": null,\n    \"last_failure_content\": null\n  }\n}\n```",
            "callParams": {
                "pathName": "/webhooks",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createWebhook.in.json",
                "out": "./lib/schemas/createWebhook.out.json"
            }
        },
        "getWorkspaceMembership": {
            "main": "./lib/actions/action.js",
            "title": "Get a workspace membership",
            "description": "Returns the complete workspace record for a single workspace membership.",
            "callParams": {
                "pathName": "/workspace_memberships/{workspace_membership_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWorkspaceMembership.in.json",
                "out": "./lib/schemas/getWorkspaceMembership.out.json"
            }
        },
        "removeFollowerForTask": {
            "main": "./lib/actions/action.js",
            "title": "Remove followers from a task",
            "description": "Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/removeFollowers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeFollowerForTask.in.json",
                "out": "./lib/schemas/removeFollowerForTask.out.json"
            }
        },
        "getUser": {
            "main": "./lib/actions/action.js",
            "title": "Get a user",
            "description": "Returns the full user record for the single user with the provided ID.",
            "callParams": {
                "pathName": "/users/{user_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getUser.in.json",
                "out": "./lib/schemas/getUser.out.json"
            }
        },
        "getWorkspace": {
            "main": "./lib/actions/action.js",
            "title": "Get a workspace",
            "description": "Returns the full workspace record for a single workspace.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWorkspace.in.json",
                "out": "./lib/schemas/getWorkspace.out.json"
            }
        },
        "removeUserForWorkspace": {
            "main": "./lib/actions/action.js",
            "title": "Remove a user from a workspace or organization",
            "description": "Remove a user from a workspace or organization.\nThe user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.\nReturns an empty data record.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/removeUser",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeUserForWorkspace.in.json",
                "out": "./lib/schemas/removeUserForWorkspace.out.json"
            }
        },
        "updateWorkspace": {
            "main": "./lib/actions/action.js",
            "title": "Update a workspace",
            "description": "A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.\nCurrently the only field that can be modified for a workspace is its name.\nReturns the complete, updated workspace record.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateWorkspace.in.json",
                "out": "./lib/schemas/updateWorkspace.out.json"
            }
        },
        "removeUserForTeam": {
            "main": "./lib/actions/action.js",
            "title": "Remove a user from a team",
            "description": "The user making this call must be a member of the team in order to remove themselves or others.",
            "callParams": {
                "pathName": "/teams/{team_gid}/removeUser",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/removeUserForTeam.in.json",
                "out": "./lib/schemas/removeUserForTeam.out.json"
            }
        },
        "addUserForWorkspace": {
            "main": "./lib/actions/action.js",
            "title": "Add a user to a workspace or organization",
            "description": "Add a user to a workspace or organization.\nThe user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/addUser",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addUserForWorkspace.in.json",
                "out": "./lib/schemas/addUserForWorkspace.out.json"
            }
        },
        "deleteStatus": {
            "main": "./lib/actions/action.js",
            "title": "Delete a status update",
            "description": "Deletes a specific, existing status update.\n\nReturns an empty data record.",
            "callParams": {
                "pathName": "/status_updates/{status_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteStatus.in.json",
                "out": "./lib/schemas/deleteStatus.out.json"
            }
        },
        "addDependentsForTask": {
            "main": "./lib/actions/action.js",
            "title": "Set dependents for a task",
            "description": "Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents*.",
            "callParams": {
                "pathName": "/tasks/{task_gid}/addDependents",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/addDependentsForTask.in.json",
                "out": "./lib/schemas/addDependentsForTask.out.json"
            }
        },
        "getWebhook": {
            "main": "./lib/actions/action.js",
            "title": "Get a webhook",
            "description": "Returns the full record for the given webhook.",
            "callParams": {
                "pathName": "/webhooks/{webhook_gid}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getWebhook.in.json",
                "out": "./lib/schemas/getWebhook.out.json"
            }
        },
        "deleteWebhook": {
            "main": "./lib/actions/action.js",
            "title": "Delete a webhook",
            "description": "This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.",
            "callParams": {
                "pathName": "/webhooks/{webhook_gid}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteWebhook.in.json",
                "out": "./lib/schemas/deleteWebhook.out.json"
            }
        },
        "updateSection": {
            "main": "./lib/actions/action.js",
            "title": "Update a section",
            "description": "A specific, existing section can be updated by making a PUT request on\nthe URL for that project. Only the fields provided in the `data` block\nwill be updated; any unspecified fields will remain unchanged. (note that\nat this time, the only field that can be updated is the `name` field.)\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated section record.",
            "callParams": {
                "pathName": "/sections/{section_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateSection.in.json",
                "out": "./lib/schemas/updateSection.out.json"
            }
        },
        "updateProject": {
            "main": "./lib/actions/action.js",
            "title": "Update a project",
            "description": "A specific, existing project can be updated by making a PUT request on\nthe URL for that project. Only the fields provided in the `data` block\nwill be updated; any unspecified fields will remain unchanged.\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated project record.",
            "callParams": {
                "pathName": "/projects/{project_gid}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/updateProject.in.json",
                "out": "./lib/schemas/updateProject.out.json"
            }
        },
        "createProjectForTeam": {
            "main": "./lib/actions/action.js",
            "title": "Create a project in a team",
            "description": "Creates a project shared with the given team.\n\nReturns the full record of the newly created project.",
            "callParams": {
                "pathName": "/teams/{team_gid}/projects",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createProjectForTeam.in.json",
                "out": "./lib/schemas/createProjectForTeam.out.json"
            }
        },
        "createProjectForWorkspace": {
            "main": "./lib/actions/action.js",
            "title": "Create a project in a workspace",
            "description": "Returns the compact project records for all projects in the workspace.\n\nIf the workspace for your project is an organization, you must also\nsupply a team to share the project with.\n\nReturns the full record of the newly created project.",
            "callParams": {
                "pathName": "/workspaces/{workspace_gid}/projects",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createProjectForWorkspace.in.json",
                "out": "./lib/schemas/createProjectForWorkspace.out.json"
            }
        }
    }
}